Last revised 31-Jan-17

			    Problem Set 1

		 Harvard Extension School CSCI E-92:
	    Principles of Operating Systems - Spring 2017

		  Due: February 12, 2017 at Midnight


As described in the syllabus, submit the solution to all problems in
this Problem Set using "git" with named branch problem-set-1.

1. (5 Points) Multiprogramming.  What is multiprogramming?  (Also in
   Tanenbaum 3/e 1.1, Tanenbaum 2/e 1.2).  In additon, give at least
   two reasons for having multiprogramming.
   
   Multiprogramming is a form of virtual parallel (i.e. psudo-parallel) processing in which 
   several programs are run at the same time on a single processor system. Since there
   is only one processor, there can be no true simultaneous execution of different programs.
   Instead, the operating system executes part of one process, then part of another, and so on.
   Which is equvivelnt to time-slicing the computing resources. To the user it gives the illusion that all the
   programs are executing at the same time. In betweeen the program, we save the state 
   of the program that are not running and hence, at a one perticular time,
   only one program is running with several saved states in a single core processor. 
   
   Following are the 3 reasons of having multiprogramming.
   
   (a) To maximize the use of computing resources, which allows the processing to take place 
   while waiting for other events:
   
   For example, when one of the process is waiting for the keyboard input(an I/O event), we do not want our 
   machine to be blocked up and keep waiting for that event. On the other way, to prevent this, let 
   one process be getting input from keyboard, and second process (for example) be handling network traffic. 
   Multiprogramming these processes allows the Operating Systems to run part of process in psudo-parallel
   to other process by maximizing the utilization of CPU. 
   
   (b) To enable fair sharing of a limited number of processors/cores :
   
   For example, if we have multiple processes it is nice to have OS as an arbiter that decides what portion of 
   the processor is assigned to each process.
   
   (c) To allow background processes to run :
   
   For example, if we do not have the multiprogramming, then we need to write a single monolithic program which 
   checks a list of things/events and then decide how to handle them. It is much easier to have an abstraction in which 
   each program is a saperate process and the operating system is responsible for switching betweeen processes. 

2. (5 Points) Protected kernel mode operations.  Tanenbaum 4/e 1.12
   (Tanenbaum 3/e 1.7, Tanenbaum 2/e 1.8).  In addition, for each
   subsection a-d, describe what problems would be caused by allowing
   the instruction to run when not in kernel mode.
   
   Protected kernel mode operations: 
   In kernel mode, the executing code has complete and unrestricted access to the underlying hardware. 
   It has the ability and permission to execute any of the CPU instructions and reference any memory address.
   The kernel mode is reserved for the lowest-level and the most trusted functions of the operating system. As thei
   name mentiones correctly, kernel mode operations are secured and protected, no user is allwed to modify these 
   critical operations.
   
   Which of the following instructions should be allowed only in kernel mode?
	(a) Disable all interrupts.
	This should be allowed only in the protected kernel mode, if CPU allows user
	processes to disable all interrupts, if one user process disables all the interrupts
	and never re-enables it. No other processes, not even OS itself, can work since there will be no
	clock interrupt to allow OS to switch from one process to another.
	
	(b) Read the time-of-day clock.
	It is not so crtical instruction, hence it is not required to make it a
	kernel mode only instruction. 
	
	(c) Set the time-of-day clock.
	This should be only allowed in a kernel mode. Since, the clock is very important and should be 
	allowed to change by only kernel. User should not be allowed to modify this. If the clock is shared and user
	is allowed to modify it then no longer has a reliable value. No computation (like timers) is reliable.
	
	(d) Change the memory map.
	This should be only allowed in kernel mode. If we allow user to change the memory map, then changing the map
	may give access to the kernel memory or other processesâ€™ memory exposing data or changing data inappropriately.
	And this will destroy the main goal of the OS and processes.
   

3. (5 Points) Priority inversion problem with priority scheduling
   vs. round-robin scheduling.  Tanenbaum 4/e 2.26 (Tanenbaum 3/e
   2.20, Tanenbaum 2/e 2.26)
   
   Priority inversion problem with priority based scheduling is a very problematic scenario in scheduling
   in which a high priority task is indirectly preempted by a lower priority task effectively "inverting"
   the relative priorities of the two tasks.
   
   As explaind in the book, for example consider a computer with two processes, H, with high priority, and L, 
   with low priority. The scheduling rules are such that H is run whenever it is in ready state. At a certain
   moment, with L in its critical region, H becomes ready to run (e.g., an I/O operation completes). H now 
   begins busy waiting, but since L is never scheduled while H is running, L never gets the chance to leave
   its critical region, so H loops forever. 
    
   In round-robin scheduling, once the process H is in the ready state, it will be only allowed to run once 
   all the processes before it have used their quantam. In other words, the time slices (also known as time quantam)
   are assigned to each process in equal portions and in circular order, handling all processes without priority.
	
   This problem will not occur with round-robin scheduling because processes can only use a certain amount 
   (a ratio, relative to other processes) of time (based on its quantam) before it is forced to wait for 
   the next process.
   
4. (5 Points) Implementing semaphores using a disable interrupts
   instruction.  Tanenbaum 4/e 2.31 (Tanenbaum 3/e 2.25, Tanenbaum 2/e
   2.23).  You must include pseudo-code for your solution.
   
   Semaphore is a variable or abstract data type that is used to control access to a common resource by multiple
   processes in a a multiprogramming operating system. Let S be a Semaphore with the following structure.
   
   pseudo-code :
   
	typedef struct 
	{
	int count;
	queue q; /* queue of threads waiting on this semaphore */
	} Semaphore;
	
	struct Semaphore s;
   	
	Down(s):
	Disable interrupts;
	s.count :=s.count-1;
	if s.count < 0
		then begin
			place a process in s.queue;
			block a process and allow interrupts;
			end
		else Enable interrupts;

	Up(s):
	Disable interrupts;
	s.count :=s.count+1;
	if s.count > 0
		then begin
			remove a process P from s.queue;
			place process P on ready list;
			end;
	Enable interrupts;

5. (10 Points) Implementing counting semaphores using binary
   semaphores.  Tanenbaum 4/e 2.32 (Tanenbaum 3/e 2.26, Tanenbaum 2/e
   2.24).  You must include pseudo-code for your solution.  By
   "ordinary machine instructions," we mean all facilities that are
   available through the C Programming Language, for example.  Your
   solution should use binary semaphores wherever mutual exclusion is
   needed.
   
   A Nonnegative integer count can be reffered to a semaphore. 
   Here, semaphores are typically used to coordinate access to resources, 
   with the semaphore count initialized to the number of free resources. 
   Below is the pseudo-code for counting semaphores using binary
   semaphores. When the semaphore count becomes zero, indicating 
   that no more resources are present, threads trying to decrement 
   the semaphore block wait until the count becomes greater than zero.
   
   down()
	{
		mutex->down();
		count --;
		if (count >= 0)
		{ 
			mutex->up();
			return; 
		}
		mutex -> up ();
		blocking -> down ()
	}
	
	up()
	{
		mutex->down();
		count ++;
		if (count > 0) // = = is not good enough and conditional is necessary
		{ 
			mutex->up();
			return; 
		}
		blocking -> up();
		mutex -> up ();
	}

6. (70 Points) Simple Shell Implementation

   Using the C Programming Language on the "nice" computers in the
   Science Center, implement a simple shell.  Your program should
   interact with the user through stdin, stdout, and stderr.  After
   outputting to stdout a prompt of "$ ", it will accept a line of
   text input from stdin and parse that line into white space
   delimited fields.  You must be able to accept lines with up to 256
   characters (not including any newline or null termination).  White
   space will be composed of one or more spaces or tabs.  From the
   input line, an integer named "argc" and an array named "argv" will
   created.  The integer argc will contain the count of the number of
   white space separated fields found in the input line.  The array
   argv will contain a list of pointers to copies of each of the
   fields found in the input line as null-terminated strings.  The C
   Standard also requires that the argv array contains a final NULL
   pointer (i.e., argv[argc] is always NULL).

   A declaration of argc and argv follows:

   int argc;
   char *argv[];

   Here is an example.  If the input were to contain:

   echo     this  is some     input   string

   then argc would contain 6 and argv would be an array of seven
   pointers; the first six would point to null terminated strings and
   the seventh pointer would be NULL.  The first pointer would point
   to the string "echo", the second pointer would point to the string
   "this", and so forth.  Note that the argv array needs to be
   dynamically allocated and that each of the strings pointed to by
   each entry in argv needs to be dynamically allocated.  The strings
   pointed to by argv will never contain any spaces or tabs.  The
   space allocated for argv should be exactly the required size (i.e.,
   it should occupy (argc+1)*sizeof(char *) bytes).  Similarly, the
   space allocated for each string should be exactly the required size
   (i.e., each string should occupy the number of bytes in the string
   + 1 for a null terminating byte).  Storage should be allocated
   using the malloc system call.

   After argc and argv are created, the shell will scan an array named
   "commands" for a match for the first string in argv and will then
   call a different function for each entry in "commands".  That is,
   we will assume that the first word on the line in the name of a
   program to be invoked by the shell.

   A declaration of commands with the initialization of four commands
   as follows:

   int cmd_date(int argc, char *argv[]);
   int cmd_echo(int argc, char *argv[]);
   int cmd_exit(int argc, char *argv[]);
   int cmd_help(int argc, char *argv[]);

   struct commandEntry {
     char *name;
     int (*functionp)(int argc, char *argv[]);
   } commands[] = {{"date", cmd_date},
                   {"echo", cmd_echo},
                   {"exit", cmd_exit},
                   {"help", cmd_help}};

   After a command returns to the shell, all storage allocated for
   argv and the strings that argv points to should be freed.  After
   the storage is freed, the shell should loop back to prompt the user
   for another input line.

   You should implement four commands.  "exit" will exit from the
   shell (i.e., cause the shell to terminate) by calling the exit
   system call.  "echo" will output each of the arguments in argv
   (except for the first) to stdout with a single space character
   between the srguments.  After the last argument is output, a
   newline should be output.  "help" will output to stdout a brief
   description of the commands accepted by the shell.  "date" will
   output to stdout the current date and time in the format "January
   23, 2014 15:57:07.123456".  "date" will call the POSIX system call
   "gettimeofday" to determine the time and date.  "gettimeofday"
   returns the number of seconds and microseconds since midnight (zero
   hours) on January 1, 1970.  Your output should be printed in the
   same timezone as that returned by the system call "gettimeofday".
   That is, the timezone information from gettimeofday should be
   ignored.

   Each command should return an integer to indicate if it succeeded
   or failed and a specific error code on failure.  A value of 0 will
   indicate success and a non-zero value will indicate failure.  You
   should create your own enumerated type of error codes for different
   errors.  If the return value is non-zero, the shell should output
   the value of that return value.  All error messages should be
   output to stderr.

   Each command should check that the appropriate number of arguments
   are specified on the command line.  If no arguments are appropriate
   for a command, then command should guarantee that no arguments have
   been specified.  The "echo" command accepts any number of arguments
   (including none), so no argument count checking is required.

   Your translation from seconds and microseconds since zero hours on
   January 1, 1970 into year, month, day, hours, minutes, seconds, and
   millionths of seconds must be written from scratch using no system
   functions.  Keep in mind that some years are leap years and others
   are not.  Leap years contain 366 days (February 29th) and all other
   years contain 365 days.  Every year that is evenly divisible by
   four is a leap year, except that every year divisible by 100 is not
   a leap year, except that every year divisible by 400 is a leap
   year.

   Your code may use only the following systems calls or library
   functions:
     malloc
     free
     exit
     fgetc
     fputc
     fputs
     fprintf
     gettimeofday
     strerror

   You may use only stdin, stdout, and stderr as I/O streams.

   Extra credit (5 Points): Allow fields on the line to be
   double-quote delimited strings that can contain spaces or tabs.
   Ensure that any such field has a matching open double-quote and
   close double-quote.  Also, allow a double-quote to appear within a
   double-quoted field in either or both of two possible ways: (1)
   allow two adjacent double-quotes within a double-quoted field to
   denote a single double-quote within the field, (2) implement the
   following backslash escape notation to allow special characters
   within a double-quoted string.

   Extra credit (5 Points): Implement special backslash escape
   characters for shell command arguments (either outside or inside
   double-quoted string arguments).  If this is implemented, then the
   backslash character would serve as a prefix for the next character.
   These two characters would then be replaced with a designated
   single character in the argument.  The character after the
   backslash would indicate what character would be designated to be
   used in the argument as follows:

     Escape sequence	Designated replacement character
     \0			null (ASCII 0)
     \a			alarm (bell) (control-g) (ASCII 7)
     \b			backspace (control-h) (ASCII 8)
     \e			escape (ASCII 27 = 0x1b)
     \f			form-feed (control-l) (ASCII 12 = 0xc)
     \n			newline (line-feed) (control-j) (ASCII 10 = 0xa)
     \r			carriage-return (control-m) (ASCII 13 = 0xd)
     \t			horizontal-tab (control-i) (ASCII 9)
     \v			vertical-tab (control-k) (ASCII 11 = 0xb)

   If the character following the backslash is not shown in the table
   above, then the character following the backslash should be used
   literally.  Obviously, this would include the double-quote and
   backslash characters.

   Extra credit (Points Vary): Add additional built-in commands to
   your shell.  None of the commands you add should require use of
   files.

   Extra credit (20 Points): Add variables to your shell.  You should
   have a "set" command to define a variable and to output all defined
   environment variables.  If the "set" command is invoked with no
   arguments, it will display the values of all shell variables.  If
   the "set" command is invoked in the format "set
   <variable>=<value>", then the shell variable <variable> is defined
   with the value <value> as a string.  Variable names may consist of
   letters and digits starting with a letter.  In variable names, the
   underscore character is treated as a letter.  You should not impose
   any constraints on the length of either variable names or of their
   values.  The value field may optionally be enclosed in
   double-quotes.  If any command line contains a dollar-sign followed
   by the name of a variable, then the value of the variable is
   substituted for its name -- this includes a possible substitution
   at the beginning of the command line where the command name would
   appear.  When this substitution phase is being performed, the name
   of a variable within a command line is terminated by a
   non-alphabetic and non-numeric character.  It is an error to
   reference a variable which is not set.  You should also implement
   the shell command "unset" which is invoked in the format "unset
   <variable>" to remove a variable from being defined in the shell.
